# -*- python -*-
# ex: set syntax=python:

from buildbot.plugins import *
from password import *
from twisted.python import log
from lustrebuildslave import *
from lustrefactory import *
from buildbot.status import html
from buildbot.status.web import authz, auth
from buildbot.plugins import status, util
from buildbot.schedulers.triggerable import Triggerable
from buildbot.schedulers.trysched import Try_Userpass

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### PROJECT IDENTITY
bb_master_url="build.lustre.org"
bb_master_port="9989"

# Gerrit Configuration
gerrit_url = "review.whamcloud.com"
gerrit_user = "LustreBuildbot"
gerrit_port = 29418
gerrit_project = "fs/lustre-release"
gerrit_branch = "master"
gerrit_id_file = None
gerrit_repo_http = "http://%s/%s.git" % (gerrit_url, gerrit_project)
gerrit_repo = "ssh://%s@%s:%d/%s" % (gerrit_user, gerrit_url, gerrit_port,
                                     gerrit_project)

bb_master = "%s:%s" % (bb_master_url, bb_master_port) 
bb_url = "https://raw.githubusercontent.com/opensfs/lustre-buildbot-config/master/scripts/" 
bb_slave_port = 9989
bb_web_port = 8010
bb_try_port = 8033

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Lustre"
c['titleURL'] = "http://" + gerrit_url

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in 
# the 'www' entry below, but with an externally-visible host name which the 
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://%s:%s" % (bb_master_url, bb_web_port)

####### FACTORIES
build_factory = createPackageBuildFactory()
tarball_factory = createTarballFactory(gerrit_repo_http)

####### BUILDER PROPERTIES

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

def merge_dicts(*args):
    z = {}
    for item in args:
        z.update(item)

    return z

### Builder properties are broken out into 3 groups. The groups are described below.
### A builders properties must be a combination of 1 property set from each group.

# Global properties are required properties. These properties control the source
# of scripts to execute and which spl and zfs tags to boot strap with.
global_props = {
    "bburl"       :      bb_url,
    "bbmaster"    :      bb_master_url,
    "installdeps" :      "no",
    "spltag"      :      "spl-0.6.5.4",
    "zfstag"      :      "zfs-0.6.5.4",
}

# This group of properties controls which features to include when compiling lustre. 
# Currently, the only options supported are whether or not to build with zfs
# and/or ldiskfs.
with_zfs = {
    "withzfs"     :      "yes",
    "withldiskfs" :      "no",
}

with_ldiskfs = {
    "withzfs"     :      "no",
    "withldiskfs" :      "yes",
}

with_zfs_ldiskfs = {
    "withzfs"     :      "yes",
    "withldiskfs" :      "yes",
}

# This group of properties controls how lustre is built and whether or not zfs must
# be built for a builder. The four types of builds are as follows:
#     - simple: a basic autogen, configure, and make
#     - deb: autogen, configure, make debs
#     - rpm: autogen, configure, make rpms
builder_default_props = {
    "buildzfs"    :      "yes",
    "buildstyle"  :      "rpm",
}

builder_simple_props = {
    "buildzfs"    :      "yes",
    "buildstyle"  :      "simple",
}

# Builder properties are a combination of exactly one set of properties from each
# of the above groups.
debiansys_props = merge_dicts(global_props, with_zfs, builder_simple_props)
default_props = merge_dicts(global_props, with_zfs_ldiskfs, builder_default_props)
tarball_props = global_props

#### BUILDSLAVES
numSlaves = 3  # number of slaves per builder

tarball_slaves = [
    LustreEC2Slave(
        name="CentOS-7.2-x86_64-tarballslave",
        ami="ami-53c33e33",
        build_wait_timeout=5*60*60
    )
]

CentOS_6_7_slaves = [
    LustreEC2Slave(
        name="CentOS-6.7-x86_64-buildslave%s" % (str(i+1)),
        ami="ami-aac63bca"
    ) for i in range(0, numSlaves)
]

CentOS_7_2_slaves = [
    LustreEC2Slave(
        name="CentOS-7.2-x86_64-buildslave%s" % (str(i+1)),
        ami="ami-53c33e33"
    ) for i in range(0, numSlaves)
]

Ubuntu_14_04_slaves = [
    LustreEC2Slave(
        name="Ubuntu-14.04-x86_64-buildslave%s" % (str(i+1)),
        ami="ami-6bc23f0b"
    ) for i in range(0, numSlaves)
]

all_slaves = CentOS_6_7_slaves + CentOS_7_2_slaves + Ubuntu_14_04_slaves + tarball_slaves

### BUILDERS
tarball_builders = [
    LustreBuilderConfig(
        name="CentOS 7.2 x86_64 (TARBALL)",
        factory=tarball_factory,
        slavenames=[slave.name for slave in tarball_slaves],
        tags=["Tarball"],
        properties=tarball_props,
    ),
]

builders = [
    LustreBuilderConfig(
        name="CentOS 6.7 x86_64 (BUILD)",
        factory=build_factory,
        slavenames=[slave.name for slave in CentOS_6_7_slaves],
        tags=["Build"],
        properties=merge_dicts(default_props, {"distro" : "centos", "distrover" : "6", "arch" : "x86_64"}),
    ),
    LustreBuilderConfig(
        name="CentOS 7.2 x86_64 (BUILD)",
        factory=build_factory,
        slavenames=[slave.name for slave in CentOS_7_2_slaves],
        tags=["Build"],
        properties=merge_dicts(default_props, {"distro" : "centos", "distrover" : "7", "arch" : "x86_64"}),
    ),
    LustreBuilderConfig(
        name="Ubuntu 14.04 x86_64 (BUILD)",
        factory=build_factory,
        slavenames=[slave.name for slave in Ubuntu_14_04_slaves],
        tags=["Build"],
        properties=merge_dicts(debiansys_props, {"distro" : "ubuntu", "distrover" : "14.04", "arch" : "x86_64"}),
    ),
]

test_builders = []

all_builders = tarball_builders + builders + test_builders

c['builders'] = all_builders

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
c['slaves'] = all_slaves

def prioritizeBuilders(buildmaster, builders):
    """
    Called by the buildmaster to prioritize the builders.  Returns a sorted
    array of builders designed to improve ec2 utilization. Builders with
    substantiated, idle slaves are given priority. Followed by builders with no
    substantiated slaves. The lowest priority is a builder that is busy.
    This helps keep all buildslaves busy while new latent buildslaves are 
    bootstrapped, a process which can take several minutes.
    """

    idle_builders = []
    busy_builders = []
    avail_builders = []

    for b in builders:
        idle = False
        busy = False
        for s in b.slaves:
            if s.isIdle():
               idle = True
               break

            if s.isBusy():
               busy = True

        if idle is True:
            if re.search('BUILD', b.name):
                idle_builders.insert(0, b)
            else:
                idle_builders.append(b)
        elif busy is True:
            if re.search('BUILD', b.name):
                busy_builders.insert(0, b)
            else:
                busy_builders.append(b)
        else:
            if re.search('BUILD', b.name):
                avail_builders.insert(0, b)
            else:
                avail_builders.append(b)

    sorted_builders = idle_builders + avail_builders + busy_builders

    log.msg("prioritized %i builder(s): %s" % (len(sorted_builders),
        [b.name for b in sorted_builders]))

    return sorted_builders

c['prioritizeBuilders'] = prioritizeBuilders

# 'protocols' contains information about protocols which master will use for
# communicating with slaves. You must define at least 'port' option that slaves 
# could connect to your master with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': bb_slave_port}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

# Run a build for each patch set created
c['change_source'] = [
    changes.GerritChangeSource(
        gerritserver=gerrit_url,
        gerritport=gerrit_port,
        project=gerrit_project,
        branch=gerrit_branch,
        username=gerrit_user,
        identity_file=gerrit_id_file,
        handled_events=["patchset-created"]),
]

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = [
    # Run our build test for each patch submitted to Gerrit
    schedulers.AnyBranchScheduler(
        name="master-patchset",
        change_filter=util.GerritChangeFilter(
            project=gerrit_project,
            branch_re=(gerrit_branch + "/*"),
            eventtype="patchset-created"),
        builderNames=[builder.name for builder in tarball_builders]),
    Triggerable(
        name="package-builders",
        builderNames=[builder.name for builder in builders]),
    Try_Userpass(
        name="try-scheduler",
        port=bb_try_port,
        builderNames=[builder.name for builder in builders],
        userpass=try_userpass)
]

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# like IRC bots.

c['status'] = []

authz_cfg=util.Authz(
    auth=util.BasicAuth(web_userpass),
    gracefulShutdown = False,
    pingBuilder = False,
    pauseSlave = 'auth',
    stopBuild = 'auth',
    stopAllBuilds = 'auth',
    forceBuild = 'auth',
    forceAllBuilds = 'auth',
    cancelPendingBuild = 'auth',
)

c['status'].append(html.WebStatus(http_port=bb_web_port,
    order_console_by_time=True, authz=authz_cfg))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}

